// AUTO-GENERATED BY WESL. Original filename: ./alpha.wesl
// @ts-check

// ---
// Value types
// ---

/**
 * @typedef {object} vec3f
 * @prop {'vec3f'} kind
 * @prop {number} x
 * @prop {number} y
 * @prop {number} z
 */

// ---
// Schema types
// ---

/**
 * @typedef {object} F32
 * @prop {'f32'} type
 * @prop {number} __value
 */
const f32 = /**@type{F32}*/ ({
  type: 'f32',
});

/**
 * @typedef {object} Vec3f
 * @prop {'vec3f'} type
 * @prop {vec3f} __value
 */
const vec3f = /**@type{Vec3f}*/ ({
  type: 'vec3f',
});

/**
 * @template T
 * @typedef {object} WgslStruct
 * @prop {'struct'} type
 * @prop {T} props
 * @prop {string=} label
 */
const struct = /**@type{<T>(label:string,props:T)=>WgslStruct<T>}*/ (
  (label, props) => ({
    type: 'struct',
    label,
    props,
  })
);

// ---
// Function types
// ---

/**
 * @template TArgs,TReturns
 * @typedef {object} WgslFn
 * @prop {'fn'} type
 * @prop {TArgs} args
 * @prop {TReturns} returns
 * @prop {string=} label
 */
const fn =
  /**@type{<TArgs extends unknown[] | [],TReturns>(label:string,args:TArgs,returns:TReturns,body:unknown)=>WgslFn<TArgs, TReturns>}*/ (
    (label, args, returns, body) => ({
      type: 'fn',
      label,
      args,
      returns,
      body,
    })
  );

// ---
// Definitions
// ---

export const half = fn(
  'half',
  [f32],
  f32,
  `(value: f32) -> f32 {
  return value * 0.5;
}`
);

export const double = fn(
  'double',
  [f32],
  f32,
  `(value: f32) -> f32 {
  return value * 2.;
}`
);

export const add = fn(
  'add',
  [f32, f32],
  f32,
  `(a: f32, b: f32) -> f32 {
  return a + b;
}`
);

export const Gradient = struct('Gradient', {
  from: vec3f,
  to: vec3f,
});
